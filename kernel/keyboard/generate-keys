#!/usr/bin/env python3
#
# Scan code table generator
#

import os
import re


HEADER_TEMPLATE = """\
// Generated by {generator}, DO NOT EDIT

#include <types.h>

typedef enum {{
    SPECIAL_KEY_START = {special_key_start},

    {keys}
}} Key;

extern u8 KEY_TABLE[{size}];
"""

KEY_TEMPLATE = "{name} = 0x{value:02X},"

CODE_TEMPLATE = """\
// Generated by {generator}, DO NOT EDIT

#include "keys.h"

u8 KEY_TABLE[{size}] = {{
    {mapping}
}};
"""

KEY_MAP_TEMPLATE = "[0x{code:02X}] = {value},"

SPECIAL_KEYS = {"left shift", "right shift", "tab"}
SPECIAL_MAPPING = {
    "enter": r"\n",
    "space": r" ",
}


def generate():
    base_dir = os.path.dirname(__file__)
    generator = os.path.basename(__file__)

    # A copy-paste of "Scan Code Set 2" table from https://wiki.osdev.org/Keyboard
    table_path = os.path.join(base_dir, "keys.csv")

    mapping = []
    special_keys = []
    special_key_start_id = 128
    next_special_key_id = special_key_start_id

    key_prefix = "KEY_"
    pressed_suffix = " pressed"
    released_suffix = " released"
    clarification_re = re.compile(r" \([^)]+\)$")

    with open(table_path) as table_file:
        for line in table_file:
            stripped_line = line.strip()
            if not stripped_line:
                continue

            tokens = [token.strip() for token in stripped_line.split("\t")]
            if len(tokens) % 2 != 0:
                raise Exception("Got an unexpected data: {!r}".format(line))

            for index in range(0, len(tokens), 2):
                code, key = tokens[index], tokens[index + 1]
                if not code and not key:
                    continue

                codes = [int(value, 16) for value in code.split(", ")]
                if (codes[0] == 0xF0 or len(codes) > 2 and codes[:2] == [0xE0, 0xF0]) and key.endswith(released_suffix):
                    continue

                if key.endswith(pressed_suffix):
                    key = key[:-len(pressed_suffix)]

                key = clarification_re.sub("", key)

                if key in SPECIAL_KEYS:
                    if len(codes) != 1:
                        raise Exception(f"Got an unexpected {key} key: {code}")

                    key = key_prefix + key.replace(" ", "_").upper()
                    mapping.append((codes[0], key))

                    special_keys.append((key, next_special_key_id))
                    next_special_key_id += 1

                    continue

                if len(codes) == 1:
                    mapped_value = SPECIAL_MAPPING.get(key)

                    if len(key) == 1 or mapped_value is not None:
                        value = mapped_value or key
                        value = "'{}'".format("\\" + value if value in ("'", "\\") else value.lower())
                        mapping.append((codes[0], value))
                        continue

                print(f"Skip: {code} -> {key}")

    mapping.sort()
    size = mapping[-1][0] + 1

    header_data = HEADER_TEMPLATE.format(
        generator=generator,
        keys="\n    ".join(KEY_TEMPLATE.format(name=name, value=value) for (name, value) in special_keys),
        size=size,
        special_key_start=special_key_start_id,
    )

    code_data = CODE_TEMPLATE.format(
        generator=generator,
        mapping="\n    ".join(KEY_MAP_TEMPLATE.format(code=code, value=value) for (code, value) in mapping),
        size=size,
    )

    with open(os.path.join(base_dir, "keys.h"), "w") as header_file:
        header_file.write(header_data)

    with open(os.path.join(base_dir, "keys.c"), "w") as code_file:
        code_file.write(code_data)


if __name__ == "__main__":
    generate()