#!/usr/bin/env python3
#
# Interrupt Descriptor Table generator
#

import os

TEMPLATE = """\
// Generated by {generator}, DO NOT EDIT
//
// See https://wiki.osdev.org/Interrupt_Descriptor_Table for details

#include "idt.h"
#include "gdt.h"

.align IDT_ENTRY_SIZE
.global IDT
IDT:
    {entries}

{handlers}
"""

ISR_TEMPLATE = """\
{isr_name}:
    push ${irq}
    jmp isr\
"""


def generate(path):
    dpl = 0
    present = True

    entries = []
    handlers = []

    for irq in range(256):
        isr_name = "isr_{}".format(irq)

        # See for details:
        # * https://wiki.osdev.org/IDT#Gate_Types
        # * https://wiki.osdev.org/Exceptions
        gate_type = 0xF if irq < 32 and irq != 2 else 0xE

        flags = (
            present << 7 |
            dpl     << 5 |
            gate_type
        )

        entries.append(
            ".word {isr_name}, GDT_KERNEL_CODE_INDEX * GDT_ENTRY_SIZE, 0x{third_word:04x}, 0x0000".format(
            isr_name=isr_name, third_word=flags << 8))

        handlers.append(ISR_TEMPLATE.format(isr_name=isr_name, irq=irq))

    data = TEMPLATE.format(
        generator=os.path.basename(__file__),
        entries="\n    ".join(entries),
        handlers="\n\n".join(handlers),
    )

    with open(path, "w") as file:
        file.write(data)


if __name__ == "__main__":
    generate(os.path.join(os.path.dirname(__file__), "idt.S"))